/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.paypal;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiLifecycle.OnActivityResultEvent;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiConvert;
import org.json.JSONException;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;

import com.paypal.android.sdk.payments.PayPalAuthorization;
import com.paypal.android.sdk.payments.PayPalFuturePaymentActivity;
import com.paypal.android.sdk.payments.PayPalItem;
import com.paypal.android.sdk.payments.PayPalPayment;
import com.paypal.android.sdk.payments.PayPalPaymentDetails;
import com.paypal.android.sdk.payments.PayPalService;
import com.paypal.android.sdk.payments.PaymentActivity;
import com.paypal.android.sdk.payments.PaymentConfirmation;

// https://github.com/luis1987/PayPalAppcelerator/blob/master/android/src/com/bea/paypal/ModulopaypalModule.java
// example :https://github.com/paypal/PayPal-Android-SDK/blob/master/SampleApp/src/main/java/com/paypal/example/paypalandroidsdkexample/SampleActivity.java

@Kroll.proxy(creatableInModule = PaypalModule.class)
public class PaymentProxy extends KrollProxy implements OnActivityResultEvent {
	// Standard Debugging variables
	private static final String LCAT = "PayPalProxy";
	String currencyCode, shortDescription, clientId;
	int intentMode, debug;
	TiActivityResultHandler responseHandler;
	boolean futurePayment = false;
	BigDecimal amount, shipping, tax;
	public static final int REQUEST_CODE_PAYMENT = 1,
			REQUEST_CODE_FUTUREPAYMENT = 2;
	List<KrollDict> paymentItems = null;

	public PaymentProxy() {
		super();
		debug = PaypalModule.debug;

	}

	private void log(String msg) {
		if (this.debug > 1) {
			Log.d(LCAT, ">>>>>>>>>>>>" + msg);
		}
	}

	/*
	 * this method (called by JS level) opens the billing layer
	 */

	@Kroll.method
	public void showPaymentOverLay() {
		Context context = TiApplication.getInstance().getApplicationContext();
		// Activity a = TiApplication.getAppRootOrCurrentActivity();
		Intent intent = new Intent(context, PaymentActivity.class);
		log("start opening paypal billing layer");
		TiActivitySupport support = (TiActivitySupport) activity;
		if (futurePayment == false) {
			log("standard payment (no futurePayment) with intentMode="
					+ intentMode);
			PayPalPayment thingsToBuy = null;

			if (intentMode == PaypalModule.PAYMENT_INTENT_SALE) {
				thingsToBuy = getStuffToBuy(PayPalPayment.PAYMENT_INTENT_SALE);
			} else if (intentMode == PaypalModule.PAYMENT_INTENT_AUTHORIZE) {
				thingsToBuy = getStuffToBuy(PayPalPayment.PAYMENT_INTENT_AUTHORIZE);
			} else if (intentMode == PaypalModule.PAYMENT_INTENT_ORDER) {
				thingsToBuy = getStuffToBuy(PayPalPayment.PAYMENT_INTENT_ORDER);
			}

			intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION,
					PaypalModule.ppConfiguration);
			/* putting payload */
			intent.putExtra(PaymentActivity.EXTRA_PAYMENT, thingsToBuy);
			/* start the overlay */
			// a.startActivityForResult(intent, REQUEST_CODE_PAYMENT);
			// log("paypal billing layer started");
		} else {
			intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION,
					PaypalModule.ppConfiguration);
		}
		support.launchActivityForResult(intent, REQUEST_CODE_PAYMENT,
				new PayPalResultHandler());

	}

	@SuppressWarnings("unchecked")
	@Override
	public void handleCreationDict(KrollDict options) {
		log("start importing payement details");
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull("intent")) {
			this.intentMode = TiConvert.toInt(options.get("intent"));
		}
		if (options.containsKeyAndNotNull("futurePayment")) {
			this.futurePayment = TiConvert.toBoolean(options
					.get("futurePayment"));
		}
		if (options.containsKeyAndNotNull("currencyCode")) {
			this.currencyCode = TiConvert.toString(options.get("currencyCode"));
		}
		if (options.containsKeyAndNotNull("shortDescription")) {
			this.shortDescription = TiConvert.toString(options
					.get("shortDescription"));
		}
		if (options.containsKeyAndNotNull("amount")) {
			this.amount = new BigDecimal(TiConvert.toString(options
					.get("amount")));
		}
		if (options.containsKeyAndNotNull("tax")) {
			this.tax = new BigDecimal(TiConvert.toString(options.get("tax")));
		}
		if (options.containsKeyAndNotNull("shipping")) {
			this.shipping = new BigDecimal(TiConvert.toString(options
					.get("shipping")));
		}
		log(options.toString());
		if (options.containsKeyAndNotNull("items")) {
			log("importing of items");
			List<Map<String, String>> paymentItems = new ArrayList<Map<String, String>>();
			Object items = options.get("items");
			if (!(items.getClass().isArray())) {
				throw new IllegalArgumentException("items must be an array");
			}
			Object[] itemArray = (Object[]) items;
			for (int i = 0; i < itemArray.length; i++) {
				Map<String, String> item = (Map<String, String>) itemArray[i];
				paymentItems.add(item);
			}
			log("items imported");
		}
		if (options.containsKeyAndNotNull("configuration")) {
			KrollDict configurationDict = options.getKrollDict("configuration");
			if (!(configurationDict instanceof KrollDict)) {
				throw new IllegalArgumentException("Invalid argument type `"
						+ configurationDict.getClass().getName()
						+ "` passed to consume()");
			}
			PaypalModule.ppConfiguration
					.environment(PaypalModule.CONFIG_ENVIRONMENT);
			if (configurationDict.containsKeyAndNotNull("merchantName")) {
				PaypalModule.ppConfiguration.merchantName(configurationDict
						.getString("merchantName"));
			}
			if (configurationDict
					.containsKeyAndNotNull("merchantPrivacyPolicyURL")) {
				try {
					PaypalModule.ppConfiguration.merchantPrivacyPolicyUri(Uri
							.parse(configurationDict
									.getString("merchantPrivacyPolicyURL")));
				} catch (NullPointerException e) {
				}
				try {
					PaypalModule.ppConfiguration.merchantUserAgreementUri(Uri
							.parse(configurationDict
									.getString("merchantUserAgreementURL")));
				} catch (NullPointerException e) {
				}
			}
			PaypalModule.ppConfiguration.clientId(PaypalModule.clientId);
			log(PaypalModule.ppConfiguration.toString());
			log("PaypalModule.clientId" + PaypalModule.clientId);
		}

	}

	private PayPalPayment getStuffToBuy(String paymentIntent) {
		log("getStuffToBuy started");
		if (paymentItems == null) {
			return new PayPalPayment(amount, currencyCode, shortDescription,
					paymentIntent);
		}
		/* iterating thrue all items from KrollDict: */
		PayPalItem[] items = new PayPalItem[this.paymentItems.size()];
		for (int i = 0; i < this.paymentItems.size(); i++) {
			String name = "no name", sku = "000", currency = "EUR";
			BigDecimal price = new BigDecimal(0);
			int quantity = 1;
			KrollDict paymentItem = paymentItems.get(i);
			if (paymentItem.containsKeyAndNotNull("name")) {
				name = TiConvert.toString(paymentItem.get("name"));
			}
			if (paymentItem.containsKeyAndNotNull("sku")) {
				sku = TiConvert.toString(paymentItem.get("sku"));
			}
			if (paymentItem.containsKeyAndNotNull("currency")) {
				currency = TiConvert.toString(paymentItem.get("currency"));
			}
			if (paymentItem.containsKeyAndNotNull("quantity")) {
				quantity = TiConvert.toInt(paymentItem.get("quantity"));
			}
			if (paymentItem.containsKeyAndNotNull("price")) {
				price = new BigDecimal(TiConvert.toString(paymentItem
						.get("price")));
			}
			items[i] = new PayPalItem(name, quantity, price, currency, sku);

		}
		BigDecimal subtotal = PayPalItem.getItemTotal(items);
		BigDecimal shipping = this.shipping;
		BigDecimal tax = this.tax;
		PayPalPaymentDetails paymentDetails = new PayPalPaymentDetails(
				shipping, subtotal, tax);
		BigDecimal amount = subtotal.add(shipping).add(tax);
		PayPalPayment payment = new PayPalPayment(amount, this.currencyCode,
				this.shortDescription, paymentIntent);
		payment.items(items).paymentDetails(paymentDetails);
		payment.custom("This is text that will be associated with the payment that the app can use.");
		return payment;
	}

	private void sendAuthorizationToServer(PayPalAuthorization authorization) {
	}

	/* class for handling results from PayPal overlay: */
	public class PayPalResultHandler implements TiActivityResultHandler,
			Runnable {

		protected int code;
		private static final String LCAT = "PayPalProxy";
		protected KrollFunction successCallback, cancelCallback, errorCallback;
		protected TiActivitySupport activitySupport;
		protected Intent barcodeIntent;

		private void log(String msg) {

			Log.d(LCAT, ">>>>>>>>>>>>" + msg);

		}

		public void run() {
			code = activitySupport.getUniqueResultCode();
			activitySupport.launchActivityForResult(barcodeIntent, code, this);
		}

		public void onError(Activity activity, int requestCode, Exception e) {

		}

		public void onResult(Activity activity, int requestCode,
				int resultCode, Intent data) {
			log("if you see this on console, then the paypal server has anwsered");
			log(" Answer from PayPal: REQUEST_CODE=" + requestCode
					+ "   resultCode=" + resultCode);
			if (requestCode == PaymentProxy.REQUEST_CODE_PAYMENT) {
				log("REQUEST_CODE_PAYMENT");
				if (resultCode == Activity.RESULT_OK) {
					log("RESULT_OK");
					PaymentConfirmation confirm = data
							.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);
					if (confirm != null) {
						log("RESULT_CONFIRMATION");
						try {
							if (hasListeners("paymentDidComplete")) {
								log("paymentDidComplete");
								KrollDict event = new KrollDict();
								event.put("success", true);
								event.put("confirm", confirm.toJSONObject()
										.toString(4));
								event.put("payment", confirm.getPayment()
										.toJSONObject());
								log(event.toString());
								fireEvent("paymentDidComplete", event);
							}
						} catch (JSONException e) {
							Log.e(LCAT,
									"an extremely unlikely failure occurred: ",
									e);
						}
					} else {
						log("no RESULT_CONFIRMATION");
					}
				} else if (resultCode == Activity.RESULT_CANCELED) {
					if (hasListeners("paymentDidCancel")) {
						log("paymentDidCancel");
						KrollDict event = new KrollDict();
						event.put("success", false);
						fireEvent("paymentDidCancel", event);
					}
				} else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
				}
			} else if (requestCode == REQUEST_CODE_FUTUREPAYMENT) {
				if (resultCode == Activity.RESULT_OK) {
					PayPalAuthorization auth = data
							.getParcelableExtra(PayPalFuturePaymentActivity.EXTRA_RESULT_AUTHORIZATION);
					if (auth != null) {
						try {
							log(auth.toJSONObject().toString(4));
							String authorization_code = auth
									.getAuthorizationCode();
							log(authorization_code);
							// sendAuthorizationToServer(auth);
						} catch (JSONException e) {
							log("an extremely unlikely failure occurred: " + e);
						}
					}
				} else if (resultCode == Activity.RESULT_CANCELED) {
					log("The user canceled.");
					/*
					 * if (hasListeners("paymentDidCancel")) { KrollDict event =
					 * new KrollDict(); event.put("success", false);
					 * fireEvent("paymentDidCancel", event); }
					 */
				} else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
					log("Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.");
				}
			}

		}
	}

}